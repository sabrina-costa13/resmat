 clear all
 close all
 clc

%% Dados topográficos

M = csvread('Trajeto47.csv',1,2);   % Leitura de arquivos no Excel (lembrar de colocar o código e o arquivo.csv na mesma pasta)


x_r  = M(:,2)*1000;             % Transformar x em kilometros para metros
y_r = M(:,1);                   % Posição em y


%% Tensão da linha: Exemplo: 138 kV -> Distância vertical mínima = 8,3m (Rodovia)

y_zs = y_r + 8.3;               % posição em y para definição de zona segura

plot(x_r,y_r,'b',x_r,y_zs,'r'); % plotar gráfico do relevo e zona segura

hold on                        

%% Posicionamento das torres

xt1 = 0;    
xt2 = 330;
xt3 = 719;
xt4 = 1068;
xt5 = 1408;
xt6 = 1748;
xt7 = 2098;
xt8 = 2477;
altura_torres = 24;

i_t1 = find(x_r == xt1);
i_t2 = find(x_r == xt2);
i_t3 = find(x_r == xt3);
i_t4 = find(x_r == xt4);
i_t5 = find(x_r == xt5);
i_t6 = find(x_r == xt6);
i_t7 = find(x_r == xt7);
i_t8 = find(x_r == xt8);

yt1 = y_r(i_t1)+ altura_torres;
yt2 = y_r(i_t2)+ altura_torres;
yt3 = y_r(i_t3)+ altura_torres;
yt4 = y_r(i_t4)+ altura_torres;
yt5 = y_r(i_t5)+ altura_torres;
yt6 = y_r(i_t6)+ altura_torres;
yt7 = y_r(i_t7)+ altura_torres;
yt8 = y_r(i_t8)+ altura_torres;

T1 = [xt1 y_r(i_t1);xt1 yt1];
T2 = [xt2 y_r(i_t2);xt2 yt2];
T3 = [xt3 y_r(i_t3);xt3 yt3];
T4 = [xt4 y_r(i_t4);xt4 yt4];
T5 = [xt5 y_r(i_t5);xt5 yt5];
T6 = [xt6 y_r(i_t6);xt6 yt6];
T7 = [xt7 y_r(i_t7);xt7 yt7];
T8 = [xt8 y_r(i_t8);xt8 yt8];

plot(T1(:,1), T1(:,2),'k');
plot(T2(:,1), T2(:,2),'k');
plot(T3(:,1), T3(:,2),'k');
plot(T4(:,1), T4(:,2),'k');
plot(T5(:,1), T5(:,2),'k');
plot(T6(:,1), T6(:,2),'k');
plot(T7(:,1), T7(:,2),'k');
plot(T8(:,1), T8(:,2),'k');
%% Equações da catenária
%Cabo escolhido: BOBOLINK rated strength:168.60kN ; Weight: 2403 Kg/Km

Tmax = 168600;       % rated strength
Tlimit = 0.25*Tmax;  % limite máximo de 25%
T0 = 0.24*Tmax;     % valor adotado no projeto (<25%)
ms = 2403/1000*9.81; % peso em N/m

fun = @(x0) yt1 - yt2 - T0/ms*(cosh(ms/T0*(xt1-x0))-cosh(ms/T0*(xt2-x0)));  % catenária escrita em função de x0
fun1 = @(x1) yt2 - yt3 - T0/ms*(cosh(ms/T0*(xt2-x1))-cosh(ms/T0*(xt3-x1)));
fun2 = @(x2) yt3 - yt4 - T0/ms*(cosh(ms/T0*(xt3-x2))-cosh(ms/T0*(xt4-x2)));
fun3 = @(x3) yt4 - yt5 - T0/ms*(cosh(ms/T0*(xt4-x3))-cosh(ms/T0*(xt5-x3)));
fun4 = @(x4) yt5 - yt6 - T0/ms*(cosh(ms/T0*(xt5-x4))-cosh(ms/T0*(xt6-x4)));
fun5 = @(x5) yt6 - yt7 - T0/ms*(cosh(ms/T0*(xt6-x5))-cosh(ms/T0*(xt7-x5)));
fun6 = @(x6) yt7 - yt8 - T0/ms*(cosh(ms/T0*(xt7-x6))-cosh(ms/T0*(xt8-x6)));

x0 = fzero(fun, (xt1+xt2)/2);    % achar a raiz x0 da função fun supondo que o valor inicial será próximo a xt1
x1 = fzero(fun1, (xt2+xt3)/2);
x2 = fzero(fun2, (xt4+xt3)/2);
x3 = fzero(fun3, (xt4+xt5)/2);
x4 = fzero(fun4, (xt6+xt5)/2);
x5 = fzero(fun5, (xt6+xt7)/2);
x6 = fzero(fun6, (xt7+xt8)/2);

y0 = yt1 - T0/ms*(cosh(ms/T0*(xt1-x0))-1); % achar o valor de y0
y1 = yt2 - T0/ms*(cosh(ms/T0*(xt2-x1))-1);
y2 = yt3 - T0/ms*(cosh(ms/T0*(xt3-x2))-1);
y3 = yt4 - T0/ms*(cosh(ms/T0*(xt4-x3))-1);
y4 = yt5 - T0/ms*(cosh(ms/T0*(xt5-x4))-1);
y5 = yt6 - T0/ms*(cosh(ms/T0*(xt6-x5))-1);
y6 = yt7 - T0/ms*(cosh(ms/T0*(xt7-x6))-1);
%% Vetores com as coordenadas da catenária com a posição mais baixa na origem
catenaria_a = xt1-x0:xt2-x0;              % definição dos pontos em x da catenária 
catenaria_b = xt2-x1:xt3-x1;
catenaria_c = xt3-x2:xt4-x2;
catenaria_d = xt4-x3:xt5-x3;
catenaria_e = xt5-x4:xt6-x4;
catenaria_f = xt6-x5:xt7-x5;
catenaria_g = xt7-x6:xt8-x6;

catenaria_h = T0/ms*(cosh(ms/T0*(catenaria_a))-1);        % definição dos pontos m y da catenária
catenaria_i = T0/ms*(cosh(ms/T0*(catenaria_b))-1);
catenaria_j = T0/ms*(cosh(ms/T0*(catenaria_c))-1);
catenaria_k = T0/ms*(cosh(ms/T0*(catenaria_d))-1);
catenaria_l = T0/ms*(cosh(ms/T0*(catenaria_e))-1);
catenaria_m = T0/ms*(cosh(ms/T0*(catenaria_f))-1);
catenaria_n = T0/ms*(cosh(ms/T0*(catenaria_g))-1);

% Vetores com as coordenadas da catenária na posição real
catenaria_pos_real_a = catenaria_a + x0;
catenaria_pos_real_b = catenaria_b + x1;
catenaria_pos_real_c = catenaria_c + x2;
catenaria_pos_real_d = catenaria_d + x3;
catenaria_pos_real_e = catenaria_e + x4;
catenaria_pos_real_f = catenaria_f + x5;
catenaria_pos_real_g = catenaria_g + x6;

catenaria_pos_real_h = catenaria_h + y0;
catenaria_pos_real_i = catenaria_i + y1;
catenaria_pos_real_j = catenaria_j + y2;
catenaria_pos_real_k = catenaria_k + y3;
catenaria_pos_real_l = catenaria_l + y4;
catenaria_pos_real_m = catenaria_m + y5;
catenaria_pos_real_n = catenaria_n + y6;

% Plotagem da catenária entre as torres
plot(catenaria_pos_real_a, catenaria_pos_real_h,'m');
plot(catenaria_pos_real_b, catenaria_pos_real_i,'m');
plot(catenaria_pos_real_c, catenaria_pos_real_j,'m');
plot(catenaria_pos_real_d, catenaria_pos_real_k,'m');
plot(catenaria_pos_real_e, catenaria_pos_real_l,'m');
plot(catenaria_pos_real_f, catenaria_pos_real_m,'m');
plot(catenaria_pos_real_g, catenaria_pos_real_n,'m');

%% Cálculo da tração em cada ponto da catenária
T = T0 + catenaria_h*ms;
Ta = T0 + catenaria_i*ms;
Tb = T0 + catenaria_j*ms;
Tc = T0 + catenaria_k*ms;
Td = T0 + catenaria_l*ms;
Te = T0 + catenaria_m*ms;
Tf = T0 + catenaria_n*ms;

figure

T_lim1 = Tlimit*ones(length(catenaria_a)); % valor limite (25% da tração)
T_lim2 = Tlimit*ones(length(catenaria_b));
T_lim3 = Tlimit*ones(length(catenaria_c));
T_lim4 = Tlimit*ones(length(catenaria_d));
T_lim5 = Tlimit*ones(length(catenaria_e));
T_lim6 = Tlimit*ones(length(catenaria_f));
T_lim7 = Tlimit*ones(length(catenaria_g));

plot(catenaria_a, T, 'b', catenaria_a, T_lim1,'r'); % plotagem da tração em cada ponto e do valor limite
plot(catenaria_b, Ta, 'b', catenaria_b, T_lim2,'r');
plot(catenaria_c, Tb, 'b', catenaria_c, T_lim3,'r');
plot(catenaria_d, Tc, 'b', catenaria_d, T_lim4,'r');
plot(catenaria_e, Td, 'b', catenaria_e, T_lim5,'r');
plot(catenaria_f, Te, 'b', catenaria_f, T_lim6,'r');
plot(catenaria_g, Tf, 'b', catenaria_, T_lim7,'r');

A = T0/ms*(sinh(ms/T0*(xt2-x0))-sinh(ms/T0*(xt1-x0))); % equação para encontrar o comprimento da catenária.
B = T0/ms*(sinh(ms/T0*(xt3-x1))-sinh(ms/T0*(xt2-x1)));
C = T0/ms*(sinh(ms/T0*(xt4-x2))-sinh(ms/T0*(xt3-x2)));
D = T0/ms*(sinh(ms/T0*(xt5-x3))-sinh(ms/T0*(xt4-x3)));
E = T0/ms*(sinh(ms/T0*(xt6-x4))-sinh(ms/T0*(xt5-x4)));
F = T0/ms*(sinh(ms/T0*(xt7-x5))-sinh(ms/T0*(xt6-x5)));
G = T0/ms*(sinh(ms/T0*(xt8-x6))-sinh(ms/T0*(xt7-x6)));
